$ Big O Notation
# Big O Notation is a way of calculating the time & space complexities of an Algorithm

$ Program Execution Model
program => cold storage => In-memory (loses it here) => cpu (runs here)

$ 2-Factor Involved in Running a Program
- Where the program is stored
- Operations that run on that program

@How do we use Big O Notation:
1. Counting Analysis: N of operations the code needs vs N of operations executable by CPU

@PS: when analyzing for Time Complexity, we don't consider the constants (assignments) BUT only the magnitude
@PS: Time Complexity varies with Input (linearly)
@PS: sum doesn't change space & i doesn't change space, since ALL numbers have fixed space value

$ Common Big O orders
1. Constant - 0(1)
2. Linear - 0(N)
3. Logarithmic - 0(logN) | >> or << by a constant factor
4. Log-linear (Linearithmetic) - 0(NlogN)
5. Quadratic - 0(N^2), O(N^3), O(N^4)
6. Exponential - 0(2^N), O(3^N), O(4^N) | recursions
7. Factorial - 0(N!) | permutations

$ Best, Worst, and Average cases
- BC: when the algorithm completes the operation at a 1st instance in n set of instances ===> O(1)
- WC: when the algorithm completes the operation at the nth instance in n set of instances ===> O(N)
- AC: when the algortihm completes the operation at N(N + 1)/2 sum of instances in N set of instances ===> (N^2 + 1/2N)/2 * N